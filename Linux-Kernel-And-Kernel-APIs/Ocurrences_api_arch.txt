


arch/alpha/include :

asm/a.out.h:5:#include <uapi/asm/a.out.h>
asm/compiler.h:5:#include <uapi/asm/compiler.h>
asm/console.h:5:#include <uapi/asm/console.h>
asm/fpu.h:6:#include <uapi/asm/fpu.h>
asm/pal.h:5:#include <uapi/asm/pal.h>
asm/param.h:5:#include <uapi/asm/param.h>
asm/ptrace.h:5:#include <uapi/asm/ptrace.h>
asm/signal.h:5:#include <uapi/asm/signal.h>
asm/socket.h:5:#include <uapi/asm/socket.h>
asm/syscall.h:5:#include <uapi/linux/audit.h>
asm/termios.h:5:#include <uapi/asm/termios.h>
asm/types.h:5:#include <uapi/asm/types.h>
asm/unistd.h:5:#include <uapi/asm/unistd.h>


arch/arm/include/asm

hardware/iop_adma.h:86: * @async_tx: support for the async_tx api


arch/c6x/include
asm/ptrace.h:14:#include <uapi/asm/ptrace.h>
asm/setup.h:14:#include <uapi/asm/setup.h>
asm/syscall.h:14:#include <uapi/linux/audit.h>

arch/h8300/include 
asm/ptrace.h:5:#include <uapi/asm/ptrace.h>
asm/signal.h:5:#include <uapi/asm/signal.h>
asm/syscall.h:11:#include <uapi/linux/audit.h>


asm/syscall.h:16:#include <uapi/linux/audit.h>
asm/termios.h:11:#include <uapi/asm/termios.h>
asm/types.h:18:#include <uapi/asm/types.h>
asm/unistd.h:11:#include <uapi/asm/unistd.h>
asm/ustack.h:6:#include <uapi/asm/ustack.h>

arch/m68k/include
asm/bootinfo.h:14:#include <uapi/asm/bootinfo.h>
asm/mcfintc.h:79:static inline void mcf_mapirq2imr(int irq, int imr)
asm/oplib.h:59:extern char *prom_mapio(char *virt_hint, int io_space, unsigned int phys_addr, unsigned int num_bytes);
asm/oplib.h:60:extern void prom_unmapio(char *virt_addr, unsigned int num_bytes);
asm/ptrace.h:5:#include <uapi/asm/ptrace.h>
asm/setup.h:25:#include <uapi/asm/bootinfo.h>
asm/setup.h:26:#include <uapi/asm/setup.h>
asm/signal.h:5:#include <uapi/asm/signal.h>
asm/syscall.h:5:#include <uapi/linux/audit.h>
asm/unistd.h:5:#include <uapi/asm/unistd.h>

arch/mips/include

asm/mipsregs.h:1614:#define read_c0_memorymapid()		__read_32bit_c0_register($4, 5)
asm/mipsregs.h:1615:#define write_c0_memorymapid(val)	__write_32bit_c0_register($4, 5, val)
asm/mmu_context.h:215:		old_mmid = read_c0_memorymapid();
asm/mmu_context.h:216:		write_c0_memorymapid(ctx & cpu_asid_mask(&cpu_data[cpu]));
asm/mmu_context.h:220:		write_c0_memorymapid(old_mmid);



arch/nios2/include

asm/elf.h:22:#include <uapi/asm/elf.h>
asm/ptrace.h:16:#include <uapi/asm/ptrace.h>
asm/syscall.h:20:#include <uapi/linux/audit.h>


/arch/parisc/include
asm/parisc-device.h:66:int iosapic_serial_irq(struct parisc_device *dev);
asm/pdc.h:5:#include <uapi/asm/pdc.h>
asm/ptrace.h:8:#include <uapi/asm/ptrace.h>
asm/ropes.h:211:	void			*iosapic_obj;
asm/ropes.h:255:extern void *iosapic_register(unsigned long hpa);
asm/ropes.h:256:extern int iosapic_fixup_irq(void *obj, struct pci_dev *pcidev);
asm/signal.h:5:#include <uapi/asm/signal.h>
asm/socket.h:5:#include <uapi/asm/socket.h>
asm/superio.h:84:extern int superio_fixup_irq(struct pci_dev *pcidev); /* called by iosapic */
asm/syscall.h:7:#include <uapi/linux/audit.h>
asm/termios.h:5:#include <uapi/asm/termios.h>
asm/unistd.h:5:#include <uapi/asm/unistd.h>

arch/riscv/include
asm/elf.h:15:#include <uapi/asm/elf.h>
asm/hwcap.h:22:#include <uapi/asm/hwcap.h>
asm/ptrace.h:17:#include <uapi/asm/ptrace.h>
asm/syscall.h:21:#include <uapi/linux/audit.h>
asm/unistd.h:21:#include <uapi/asm/unistd.h>

arch/sh/include
asm/dma.h:108:/* arch/sh/drivers/dma/dma-api.c */
asm/hw_breakpoint.h:5:#include <uapi/asm/hw_breakpoint.h>
asm/ptrace_32.h:5:#include <uapi/asm/ptrace_32.h>
asm/ptrace_64.h:5:#include <uapi/asm/ptrace_64.h>
asm/ptrace.h:14:#include <uapi/asm/ptrace.h>
asm/setup.h:5:#include <uapi/asm/setup.h>
asm/syscall_32.h:5:#include <uapi/linux/audit.h>
asm/syscall_64.h:5:#include <uapi/linux/audit.h>
asm/types.h:5:#include <uapi/asm/types.h>
asm/unistd.h:35:#include <uapi/asm/unistd.h>

arch/x86/include
sm/acpi.h:41:extern int acpi_lapic;
asm/acpi.h:42:extern int acpi_ioapic;
asm/acpi.h:134: return !!acpi_lapic;
asm/acpi.h:149:#define acpi_lapic 0
asm/acpi.h:150:#define acpi_ioapic 0
asm/apicdef.h:161: * In the following, "apicid" is a physical APIC ID.
asm/apicdef.h:166:#define APIC_CLUSTER(apicid)  ((apicid) & XAPIC_DEST_CLUSTER_MASK)
asm/apicdef.h:167:#define APIC_CLUSTERID(apicid)        (APIC_CLUSTER(apicid) >> XAPIC_DEST_CPUS_SHIFT)
asm/apicdef.h:168:#define APIC_CPUID(apicid)    ((apicid) & XAPIC_DEST_CPUS_MASK)
asm/apicdef.h:179:struct local_apic {
asm/apicdef.h:187:                      phys_apic_id    :  4,
asm/apicdef.h:250:                      apic_enabled    :  1,
asm/apicdef.h:435:enum ioapic_irq_destination_types {
asm/apic_flat_64.h:5:extern void flat_init_apic_ldr(void);
asm/apic.h:8:#include <asm/apicdef.h>
asm/apic.h:24:/* Macros for apic_extnmi which controls external NMI masking */
asm/apic.h:31: * This can be turned up by using apic=verbose for more
asm/apic.h:32: * information and apic=debug for _lots_ of information.
asm/apic.h:33: * apic_verbosity is defined in apic.c
asm/apic.h:35:#define apic_printk(v, s, a...) do {       \
asm/apic.h:36:          if ((v) <= apic_verbosity) \
asm/apic.h:42:extern void generic_apic_probe(void);
asm/apic.h:44:static inline void generic_apic_probe(void)
asm/apic.h:51:extern unsigned int apic_verbosity;
asm/apic.h:52:extern int local_apic_timer_c2_ok;
asm/apic.h:54:extern int disable_apic;
asm/apic.h:55:extern unsigned int lapic_timer_frequency;
asm/apic.h:57:extern enum apic_intr_mode_id apic_intr_mode;
asm/apic.h:58:enum apic_intr_mode_id {
asm/apic.h:67:extern void __inquire_remote_apic(int apicid);
asm/apic.h:69:static inline void __inquire_remote_apic(int apicid)
asm/apic.h:74:static inline void default_inquire_remote_apic(int apicid)
asm/apic.h:76:  if (apic_verbosity >= APIC_DEBUG)
asm/apic.h:77:          __inquire_remote_apic(apicid);
asm/apic.h:81: * With 82489DX we can't rely on apic feature bit
asm/apic.h:83: * such an apic chip so we assume that SMP configuration
asm/apic.h:88:static inline bool apic_from_smp_config(void)
asm/apic.h:90:  return smp_found_config && !disable_apic;
asm/apic.h:102:static inline void native_apic_mem_write(u32 reg, u32 v)
asm/apic.h:111:static inline u32 native_apic_mem_read(u32 reg)
asm/apic.h:116:extern void native_apic_wait_icr_idle(void);
asm/apic.h:117:extern u32 native_safe_apic_wait_icr_idle(void);
asm/apic.h:118:extern void native_apic_icr_write(u32 low, u32 id);
asm/apic.h:119:extern u64 native_apic_icr_read(void);
asm/apic.h:121:static inline bool apic_is_x2apic_enabled(void)
asm/apic.h:130:extern void enable_IR_x2apic(void);
asm/apic.h:134:extern int lapic_get_maxlvt(void);
asm/apic.h:138:extern void lapic_shutdown(void);
asm/apic.h:141:extern void apic_intr_mode_init(void);
asm/apic.h:142:extern void init_apic_mappings(void);
asm/apic.h:143:void register_lapic_address(unsigned long address);
asm/apic.h:146:extern void lapic_update_tsc_freq(void);
asm/apic.h:149:static inline int apic_force_enable(unsigned long addr)
asm/apic.h:154:extern int apic_force_enable(unsigned long addr);
asm/apic.h:157:extern void apic_bsp_setup(bool upmode);
asm/apic.h:158:extern void apic_ap_setup(void);
asm/apic.h:164:extern int apic_is_clustered_box(void);
asm/apic.h:166:static inline int apic_is_clustered_box(void)
asm/apic.h:173:extern void lapic_assign_system_vectors(void);
asm/apic.h:174:extern void lapic_assign_legacy_vector(unsigned int isairq, bool replace);
asm/apic.h:175:extern void lapic_online(void);
asm/apic.h:176:extern void lapic_offline(void);
asm/apic.h:179:static inline void lapic_shutdown(void) { }
asm/apic.h:180:#define local_apic_timer_c2_ok           1
asm/apic.h:181:static inline void init_apic_mappings(void) { }
asm/apic.h:185:static inline void lapic_update_tsc_freq(void) { }
asm/apic.h:187:static inline void apic_intr_mode_init(void) { }
asm/apic.h:188:static inline void lapic_assign_system_vectors(void) { }
asm/apic.h:189:static inline void lapic_assign_legacy_vector(unsigned int i, bool r) { }
asm/apic.h:195: * sending the IPI through x2apic wrmsr. We need a serializing instruction or
asm/apic.h:198:static inline void x2apic_wrmsr_fence(void)
asm/apic.h:203:static inline void native_apic_msr_write(u32 reg, u32 v)
asm/apic.h:212:static inline void native_apic_msr_eoi_write(u32 reg, u32 v)
asm/apic.h:217:static inline u32 native_apic_msr_read(u32 reg)
asm/apic.h:228:static inline void native_x2apic_wait_icr_idle(void)
asm/apic.h:230: /* no need to wait for icr idle in x2apic */
asm/apic.h:234:static inline u32 native_safe_x2apic_wait_icr_idle(void)
asm/apic.h:236: /* no need to wait for icr idle in x2apic */
asm/apic.h:240:static inline void native_x2apic_icr_write(u32 low, u32 id)
asm/apic.h:245:static inline u64 native_x2apic_icr_read(void)
asm/apic.h:253:extern int x2apic_mode;
asm/apic.h:254:extern int x2apic_phys;
asm/apic.h:255:extern void __init check_x2apic(void);
asm/apic.h:256:extern void x2apic_setup(void);
asm/apic.h:257:static inline int x2apic_enabled(void)
asm/apic.h:259: return boot_cpu_has(X86_FEATURE_X2APIC) && apic_is_x2apic_enabled();
asm/apic.h:262:#define x2apic_supported()       (boot_cpu_has(X86_FEATURE_X2APIC))
asm/apic.h:264:static inline void check_x2apic(void) { }
asm/apic.h:265:static inline void x2apic_setup(void) { }
asm/apic.h:266:static inline int x2apic_enabled(void) { return 0; }
asm/apic.h:268:#define x2apic_mode              (0)
asm/apic.h:269:#define  x2apic_supported()      (0)
asm/apic.h:284:struct apic {
asm/apic.h:308: u32     (*calc_dest_apicid)(unsigned int cpu);
asm/apic.h:317: int     (*apic_id_valid)(u32 apicid);
asm/apic.h:318: int     (*apic_id_registered)(void);
asm/apic.h:320: bool    (*check_apicid_used)(physid_mask_t *map, int apicid);
asm/apic.h:321: void    (*init_apic_ldr)(void);
asm/apic.h:322: void    (*ioapic_phys_id_map)(physid_mask_t *phys_map, physid_mask_t *retmap);
asm/apic.h:323: void    (*setup_apic_routing)(void);
asm/apic.h:324: int     (*cpu_present_to_apicid)(int mps_cpu);
asm/apic.h:325: void    (*apicid_to_cpu_present)(int phys_apicid, physid_mask_t *retmap);
asm/apic.h:326: int     (*check_phys_apicid_present)(int phys_apicid);
asm/apic.h:327: int     (*phys_pkg_id)(int cpuid_apic, int index_msb);
asm/apic.h:329: u32     (*get_apic_id)(unsigned long x);
asm/apic.h:330: u32     (*set_apic_id)(unsigned int id);
asm/apic.h:333: int     (*wakeup_secondary_cpu)(int apicid, unsigned long start_eip);
asm/apic.h:335: void    (*inquire_remote_apic)(int apicid);
asm/apic.h:340:  * return the logical apicid.  x86_[bios]_cpu_to_apicid is
asm/apic.h:343:  * If logical apicid can't be determined that early, the function
asm/apic.h:344:  * may return BAD_APICID.  Logical apicid will be configured after
asm/apic.h:345:  * init_apic_ldr() while bringing up CPUs.  Note that NUMA affinity
asm/apic.h:348: int (*x86_32_early_logical_apicid)(int cpu);
asm/apic.h:358:extern struct apic *apic;
asm/apic.h:361: * APIC drivers are probed based on how they are listed in the .apicdrivers
asm/apic.h:363: * of different apic driver files in the Makefile.
asm/apic.h:365: * For the files having two apic drivers, we use apic_drivers()
asm/apic.h:368:#define apic_driver(sym)                                 \
asm/apic.h:369: static const struct apic *__apicdrivers_##sym __used            \
asm/apic.h:370: __aligned(sizeof(struct apic *))                        \
asm/apic.h:371: __section(.apicdrivers) = { &sym }
asm/apic.h:373:#define apic_drivers(sym1, sym2)                                 \
asm/apic.h:374: static struct apic *__apicdrivers_##sym1##sym2[2] __used        \
asm/apic.h:375: __aligned(sizeof(struct apic *))                                \
asm/apic.h:376: __section(.apicdrivers) = { &sym1, &sym2 }
asm/apic.h:378:extern struct apic *__apicdrivers[], *__apicdrivers_end[];
asm/apic.h:384:extern int wakeup_secondary_cpu_via_nmi(int apicid, unsigned long start_eip);
asm/apic.h:385:extern int lapic_can_unplug_cpu(void);
asm/apic.h:390:static inline u32 apic_read(u32 reg)
asm/apic.h:392: return apic->read(reg);
asm/apic.h:395:static inline void apic_write(u32 reg, u32 val)
asm/apic.h:397: apic->write(reg, val);
asm/apic.h:400:static inline void apic_eoi(void)
asm/apic.h:402: apic->eoi_write(APIC_EOI, APIC_EOI_ACK);
asm/apic.h:405:static inline u64 apic_icr_read(void)
asm/apic.h:407: return apic->icr_read();
asm/apic.h:410:static inline void apic_icr_write(u32 low, u32 high)
asm/apic.h:412: apic->icr_write(low, high);
asm/apic.h:415:static inline void apic_wait_icr_idle(void)
asm/apic.h:417: apic->wait_icr_idle();
asm/apic.h:420:static inline u32 safe_apic_wait_icr_idle(void)
asm/apic.h:422: return apic->safe_wait_icr_idle();
asm/apic.h:425:extern void __init apic_set_eoi_write(void (*eoi_write)(u32 reg, u32 v));
asm/apic.h:429:static inline u32 apic_read(u32 reg) { return 0; }
asm/apic.h:430:static inline void apic_write(u32 reg, u32 val) { }
asm/apic.h:431:static inline void apic_eoi(void) { }
asm/apic.h:432:static inline u64 apic_icr_read(void) { return 0; }
asm/apic.h:433:static inline void apic_icr_write(u32 low, u32 high) { }
asm/apic.h:434:static inline void apic_wait_icr_idle(void) { }
asm/apic.h:435:static inline u32 safe_apic_wait_icr_idle(void) { return 0; }
asm/apic.h:436:static inline void apic_set_eoi_write(void (*eoi_write)(u32 reg, u32 v)) {}
asm/apic.h:440:extern void apic_ack_irq(struct irq_data *data);
asm/apic.h:448: apic_eoi();
asm/apic.h:451:static inline unsigned default_get_apic_id(unsigned long x)
asm/apic.h:453: unsigned int ver = GET_APIC_VERSION(apic_read(APIC_LVR));
asm/apic.h:468:extern void apic_send_IPI_self(int vector);
asm/apic.h:470:DECLARE_PER_CPU(int, x2apic_extra_bits);
asm/apic.h:481:DECLARE_EARLY_PER_CPU_READ_MOSTLY(u16, x86_bios_cpu_apicid);
asm/apic.h:483:extern struct apic apic_noop;
asm/apic.h:485:static inline unsigned int read_apic_id(void)
asm/apic.h:487: unsigned int reg = apic_read(APIC_ID);
asm/apic.h:489: return apic->get_apic_id(reg);
asm/apic.h:492:extern int default_apic_id_valid(u32 apicid);
asm/apic.h:494:extern void default_setup_apic_routing(void);
asm/apic.h:496:extern u32 apic_default_calc_apicid(unsigned int cpu);
asm/apic.h:497:extern u32 apic_flat_calc_apicid(unsigned int cpu);
asm/apic.h:499:extern bool default_check_apicid_used(physid_mask_t *map, int apicid);
asm/apic.h:500:extern void default_ioapic_phys_id_map(physid_mask_t *phys_map, physid_mask_t *retmap);
asm/apic.h:501:extern int default_cpu_present_to_apicid(int mps_cpu);
asm/apic.h:502:extern int default_check_phys_apicid_present(int phys_apicid);
asm/apic.h:507:bool apic_id_is_primary_thread(unsigned int id);
asm/apic.h:509:static inline bool apic_id_is_primary_thread(unsigned int id) { return false; }
asm/apic.h:545:extern void ioapic_zap_locks(void);
asm/boot.h:7:#include <uapi/asm/boot.h>
asm/cpufeatures.h:365:#define X86_BUG_AMD_APIC_C1E              X86_BUG(4) /* "apic_c1e" AMD Erratum 400 */
asm/cpu.h:19:#define cpu_physical_id(cpu)                       boot_cpu_physical_apicid
asm/debugreg.h:7:#include <uapi/asm/debugreg.h>
asm/desc.h:437:extern void idt_setup_apic_and_irq_gates(void);
asm/efi.h:5:#include <asm/fpu/api.h>
asm/elf.h:268: * The bits are defined in uapi/asm/hwcap2.h.
asm/entry_arch.h:36:BUILD_INTERRUPT(apic_timer_interrupt,LOCAL_TIMER_VECTOR)
asm/fixmap.h:30:#include <asm/apicdef.h>
asm/fixmap.h:36:#include <uapi/asm/vsyscall.h>
asm/gart.h:5:#include <asm/e820/api.h>
asm/genapic.h:1:#include <asm/apic.h>
asm/hardirq.h:14:       unsigned int apic_timer_irqs;   /* arch dependent */
asm/hardirq.h:24:       unsigned int apic_perf_irqs;
asm/hardirq.h:25:       unsigned int apic_irq_work_irqs;
asm/hw_breakpoint.h:5:#include <uapi/asm/hw_breakpoint.h>
asm/hw_irq.h:32:extern asmlinkage void apic_timer_interrupt(void);
asm/hw_irq.h:88:                        int             ioapic_id;
asm/hw_irq.h:89:                        int             ioapic_pin;
asm/hw_irq.h:90:                        int             ioapic_node;
asm/hw_irq.h:91:                        u32             ioapic_trigger : 1;
asm/hw_irq.h:92:                        u32             ioapic_polarity : 1;
asm/hw_irq.h:93:                        u32             ioapic_valid : 1;
asm/hw_irq.h:94:                        struct IO_APIC_route_entry *ioapic_entry;
asm/hw_irq.h:120:       unsigned int            dest_apicid;
asm/hw_irq.h:136:extern void apic_ack_edge(struct irq_data *data);
asm/hyperv-tlfs.h:513:  __u32 apic_assist;
asm/hyperv-tlfs.h:616:  u64 virtual_apic_page_addr;
asm/hyperv-tlfs.h:742:          u64 apic_vector:8;
asm/ia32.h:14:#include <uapi/asm/sigcontext.h>
asm/intel-mid.h:69: * one. Other than that it also added always-on and constant tsc and lapic
asm/intel_scu_ipc.h:56:/* I2C control api */
asm/io_apic.h:7:#include <asm/apicdef.h>
asm/io_apic.h:100:struct ioapic_domain_cfg;
asm/io_apic.h:123:extern int nr_ioapics;
asm/io_apic.h:125:extern int mpc_ioapic_id(int ioapic);
asm/io_apic.h:126:extern unsigned int mpc_ioapic_addr(int ioapic);
asm/io_apic.h:134:/* 1 if "noapic" boot option passed */
asm/io_apic.h:135:extern int skip_ioapic_setup;
asm/io_apic.h:137:/* 1 if "noapic" boot option passed */
asm/io_apic.h:138:extern int noioapicquirk;
asm/io_apic.h:140:/* -1 if "noapic" boot option passed */
asm/io_apic.h:141:extern int noioapicreroute;
asm/io_apic.h:145:extern unsigned long io_apic_irqs;
asm/io_apic.h:147:#define IO_APIC_IRQ(x) (((x) >= NR_IRQS_LEGACY) || ((1 << (x)) & io_apic_irqs))
asm/io_apic.h:153:#define io_apic_assign_pci_irqs \
asm/io_apic.h:154:      (mp_irq_entries && !skip_ioapic_setup && io_apic_irqs)
asm/io_apic.h:157:extern void ioapic_insert_resources(void);
asm/io_apic.h:158:extern int arch_early_ioapic_init(void);
asm/io_apic.h:160:extern int save_ioapic_entries(void);
asm/io_apic.h:161:extern void mask_ioapic_entries(void);
asm/io_apic.h:162:extern int restore_ioapic_entries(void);
asm/io_apic.h:164:extern void setup_ioapic_ids_from_mpc(void);
asm/io_apic.h:165:extern void setup_ioapic_ids_from_mpc_nocheck(void);
asm/io_apic.h:167:extern int mp_find_ioapic(u32 gsi);
asm/io_apic.h:168:extern int mp_find_ioapic_pin(int ioapic, u32 gsi);
asm/io_apic.h:172:extern int mp_register_ioapic(int id, u32 address, u32 gsi_base,
asm/io_apic.h:173:                            struct ioapic_domain_cfg *cfg);
asm/io_apic.h:174:extern int mp_unregister_ioapic(u32 gsi_base);
asm/io_apic.h:175:extern int mp_ioapic_registered(u32 gsi_base);
asm/io_apic.h:177:extern void ioapic_set_alloc_attr(struct irq_alloc_info *info,
asm/io_apic.h:182:extern void disable_ioapic_support(void);
asm/io_apic.h:184:extern void __init io_apic_init_mappings(void);
asm/io_apic.h:185:extern unsigned int native_io_apic_read(unsigned int apic, unsigned int reg);
asm/io_apic.h:188:static inline unsigned int io_apic_read(unsigned int apic, unsigned int reg)
asm/io_apic.h:190:      return x86_apic_ops.io_apic_read(apic, reg);
asm/io_apic.h:202:#define io_apic_assign_pci_irqs 0
asm/io_apic.h:203:#define setup_ioapic_ids_from_mpc x86_init_noop
asm/io_apic.h:204:static inline void ioapic_insert_resources(void) { }
asm/io_apic.h:205:static inline int arch_early_ioapic_init(void) { return 0; }
asm/io_apic.h:208:static inline int mp_find_ioapic(u32 gsi) { return 0; }
asm/io_apic.h:217:static inline int save_ioapic_entries(void)
asm/io_apic.h:222:static inline void mask_ioapic_entries(void) { }
asm/io_apic.h:223:static inline int restore_ioapic_entries(void)
asm/io_apic.h:229:static inline void disable_ioapic_support(void) { }
asm/io_apic.h:230:static inline void io_apic_init_mappings(void) { }
sm/ipi.h:24:#include <asm/apic.h>
asm/ipi.h:54:static inline void __xapic_wait_icr_idle(void)
asm/ipi.h:56:   while (native_apic_mem_read(APIC_ICR) & APIC_ICR_BUSY)
asm/ipi.h:83:           apic->send_IPI_mask_allbutself(cpu_online_mask, vector);
asm/ipi.h:85:           __default_send_IPI_shortcut(APIC_DEST_ALLBUT, vector, apic->dest_logical);
asm/ipi.h:91:           apic->send_IPI_mask(cpu_online_mask, vector);
asm/ipi.h:93:           __default_send_IPI_shortcut(APIC_DEST_ALLINC, vector, apic->dest_logical);
asm/irqdomain.h:27:enum ioapic_domain_type {
asm/irqdomain.h:34:struct ioapic_domain_cfg {
asm/irqdomain.h:35:     enum ioapic_domain_type         type;
asm/irqdomain.h:40:extern const struct irq_domain_ops mp_ioapic_irqdomain_ops;
asm/irqdomain.h:50:extern int mp_irqdomain_ioapic_idx(struct irq_domain *domain);
asm/irq.h:11:#include <asm/apicdef.h>
asm/irq_remapping.h:27:#include <asm/io_apic.h>
asm/ist.h:18:#include <uapi/asm/ist.h>
asm/kvm_host.h:31:#include <asm/apic.h>
asm/kvm_host.h:230:/* apic attention bits */
asm/kvm_host.h:236: * See the implementation in apic_update_pv_eoi.
asm/kvm_host.h:532:     u64 hv_vapic;
asm/kvm_host.h:560:     u64 apic_base;
asm/kvm_host.h:561:     struct kvm_lapic *apic;    /* kernel irqchip context */
asm/kvm_host.h:562:     bool apicv_active;
asm/kvm_host.h:564:     DECLARE_BITMAP(ioapic_handled_vectors, 256);
asm/kvm_host.h:565:     unsigned long apic_attention;
asm/kvm_host.h:566:     int32_t apic_arb_prio;
asm/kvm_host.h:773:     int pending_ioapic_eoi;
asm/kvm_host.h:805: * hence cannot use kvm_irq_delivery_to_apic_fast either.
asm/kvm_host.h:811:struct kvm_apic_map {
asm/kvm_host.h:814:     u32 max_apic_id;
asm/kvm_host.h:816:             struct kvm_lapic *xapic_flat_map[8];
asm/kvm_host.h:817:             struct kvm_lapic *xapic_cluster_map[16][4];
asm/kvm_host.h:819:     struct kvm_lapic *phys_map[];
asm/kvm_host.h:872:     struct kvm_ioapic *vioapic;
asm/kvm_host.h:874:     atomic_t vapics_in_nmi_mode;
asm/kvm_host.h:875:     struct mutex apic_map_lock;
asm/kvm_host.h:876:     struct kvm_apic_map *apic_map;
asm/kvm_host.h:878:     bool apic_access_page_done;
asm/kvm_host.h:923:     u8 nr_reserved_ioapic_pins;
asm/kvm_host.h:925:     bool disabled_lapic_found;
asm/kvm_host.h:927:     bool x2apic_format;
asm/kvm_host.h:928:     bool x2apic_broadcast_quirk_disabled;
asm/kvm_host.h:986:struct kvm_lapic_irq {
asm/kvm_host.h:1083:    bool (*get_enable_apicv)(struct kvm_vcpu *vcpu);
asm/kvm_host.h:1084:    void (*refresh_apicv_exec_ctrl)(struct kvm_vcpu *vcpu);
asm/kvm_host.h:1085:    void (*hwapic_irr_update)(struct kvm_vcpu *vcpu, int max_irr);
asm/kvm_host.h:1086:    void (*hwapic_isr_update)(struct kvm_vcpu *vcpu, int isr);
asm/kvm_host.h:1087:    bool (*guest_apic_has_interrupt)(struct kvm_vcpu *vcpu);
asm/kvm_host.h:1089:    void (*set_virtual_apic_mode)(struct kvm_vcpu *vcpu);
asm/kvm_host.h:1090:    void (*set_apic_access_page_addr)(struct kvm_vcpu *vcpu, hpa_t hpa);
asm/kvm_host.h:1173:    void (*apicv_post_state_restore)(struct kvm_vcpu *vcpu);
asm/kvm_host.h:1409:void kvm_vcpu_deactivate_apicv(struct kvm_vcpu *vcpu);
asm/kvm_host.h:1529:void kvm_vcpu_reload_apic_access_page(struct kvm_vcpu *vcpu);
asm/kvm_host.h:1546:void kvm_make_scan_ioapic_request(struct kvm *kvm);
asm/kvm_host.h:1568:bool kvm_intr_is_single_vcpu(struct kvm *kvm, struct kvm_lapic_irq *irq,
asm/kvm_host.h:1572:                 struct kvm_lapic_irq *irq);
asm/kvm_host.h:1588:static inline int kvm_cpu_get_apicid(int mps_cpu)
asm/kvm_host.h:1591:    return default_cpu_present_to_apicid(mps_cpu);
asm/kvm_para.h:7:#include <uapi/asm/kvm_para.h>
asm/mce.h:5:#include <uapi/asm/mce.h>
asm/microcode_amd.h:34: u8      bios_api_rev;
asm/mpspec_def.h:47:    unsigned int lapic;             /* APIC address */
asm/mpspec_def.h:70:    unsigned char apicid;           /* Local APIC number */
asm/mpspec_def.h:71:    unsigned char apicver;          /* Its versions */
asm/mpspec_def.h:106:struct mpc_ioapic {
asm/mpspec_def.h:108:   unsigned char apicid;
asm/mpspec_def.h:109:   unsigned char apicver;
asm/mpspec_def.h:111:   unsigned int apicaddr;
asm/mpspec_def.h:120:   unsigned char dstapic;
asm/mpspec_def.h:151:   unsigned char destapic;
asm/mpspec_def.h:152:   unsigned char destapiclint;
asm/mpspec.h:8:#include <asm/apicdef.h>
asm/mpspec.h:42:extern unsigned int boot_cpu_physical_apicid;
asm/mpspec.h:43:extern u8 boot_cpu_apic_version;
asm/mpspec.h:44:extern unsigned long mp_lapic_addr;
asm/mpspec.h:70:extern int default_mpc_apic_id(struct mpc_cpu *m);
asm/mpspec.h:82:#define default_mpc_apic_id NULL
asm/mpspec.h:89:int generic_processor_info(int apicid, int version);
asm/mshyperv.h:363:void hv_apic_init(void);
asm/mshyperv.h:367:static inline void hv_apic_init(void) {}
asm/msr.h:12:#include <uapi/asm/msr.h>
asm/mtrr.h:26:#include <uapi/asm/mtrr.h>
asm/numa.h:8:#include <asm/apicdef.h>
asm/numa.h:24: * __apicid_to_node[] stores the raw mapping between physical apicid and
asm/numa.h:27: * The mapping may be overridden by apic->numa_cpu_node() on 32bit and thus
asm/numa.h:28: * should be accessed by the accessors - set_apicid_to_node() and
asm/numa.h:31:extern s16 __apicid_to_node[MAX_LOCAL_APIC];
asm/numa.h:37:static inline void set_apicid_to_node(int apicid, s16 node)
asm/numa.h:39:  __apicid_to_node[apicid] = node;
asm/numa.h:45:static inline void set_apicid_to_node(int apicid, s16 node)
asm/pci.h:35:extern int noioapicquirk;
asm/pci.h:36:extern int noioapicreroute;
asm/pci.h:112:/* implemented in arch/x86/kernel/apic/io_apic. */
asm/perf_event.h:279:extern void perf_events_lapic_init(void);
asm/perf_event.h:337:static inline void perf_events_lapic_init(void)    { }
asm/pgtable.h:27:#include <asm/fpu/api.h>
asm/processor-flags.h:5:#include <uapi/asm/processor-flags.h>
asm/processor.h:15:#include <uapi/asm/sigcontext.h>
asm/processor.h:109:    u16                     apicid;
asm/processor.h:110:    u16                     initial_apicid;
asm/processor.h:722:extern void amd_e400_c1e_apic_setup(void);
asm/prom.h:26:extern int of_ioapic;
asm/prom.h:35:#define of_ioapic 0
asm/ptrace.h:7:#include <uapi/asm/ptrace.h>
asm/setup.h:5:#include <uapi/asm/setup.h>
asm/sigcontext.h:5:/* This is a legacy header - all kernel code includes <uapi/asm/sigcontext.h> directly. */
asm/sigcontext.h:7:#include <uapi/asm/sigcontext.h>
asm/sigframe.h:5:#include <uapi/asm/sigcontext.h>
asm/signal.h:27:/* non-uapi in-kernel SA_FLAGS for those indicates ABI for a signal frame */
asm/signal.h:36:#include <uapi/asm/signal.h>
asm/signal.h:43:#include <uapi/asm/sigcontext.h>
m/smp.h:15:#  include <asm/io_apic.h>
asm/smp.h:36:DECLARE_EARLY_PER_CPU_READ_MOSTLY(u16, x86_cpu_to_apicid);
asm/smp.h:38:DECLARE_EARLY_PER_CPU_READ_MOSTLY(u16, x86_bios_cpu_apicid);
asm/smp.h:40:DECLARE_EARLY_PER_CPU_READ_MOSTLY(int, x86_cpu_to_logical_apicid);
asm/smp.h:157:#define cpu_physical_id(cpu)      per_cpu(x86_cpu_to_apicid, cpu)
asm/suspend_32.h:11:#include <asm/fpu/api.h>
asm/suspend_64.h:11:#include <asm/fpu/api.h>
asm/svm.h:5:#include <uapi/asm/svm.h>
asm/svm.h:83:   u64 avic_vapic_bar;
asm/syscall.h:16:#include <uapi/linux/audit.h>
asm/topology.h:125:int topology_update_package_map(unsigned int apicid, unsigned int cpu);
asm/topology.h:132:topology_update_package_map(unsigned int apicid, unsigned int cpu) { return 0; }
asm/traps.h:116:void smp_apic_timer_interrupt(struct pt_regs *regs);
asm/unistd.h:5:#include <uapi/asm/unistd.h>
asm/vgtod.h:8:#include <uapi/linux/time.h>
asm/vm86.h:6:#include <uapi/asm/vm86.h>
asm/vmx.h:30:#include <uapi/asm/vmx.h>
asm/vsyscall.h:6:#include <uapi/asm/vsyscall.h>
asm/x86_init.h:15: * @setup_ioapic_ids:         platform specific ioapic id override
asm/x86_init.h:16: * @mpc_apic_id:              platform specific mpc apic id assignment
asm/x86_init.h:25:      void (*setup_ioapic_ids)(void);
asm/x86_init.h:26:      int (*mpc_apic_id)(struct mpc_cpu *m);
asm/x86_init.h:123: * @x2apic_available:                X2APIC detection
asm/x86_init.h:130:     bool (*x2apic_available)(void);
asm/x86_init.h:253: * @apic_post_init:          adjust apic if needed
asm/x86_init.h:275:     void (*apic_post_init)(void);
asm/x86_init.h:290:struct x86_apic_ops {
asm/x86_init.h:291:     unsigned int    (*io_apic_read)   (unsigned int apic, unsigned int reg);
asm/x86_init.h:299:extern struct x86_apic_ops x86_apic_ops;
asm/xor_32.h:29:#include <asm/fpu/api.h>
asm/xor_avx.h:21:#include <asm/fpu/api.h>
asm/xor.h:36:#include <asm/fpu/api.h>
fpu/internal.h:20:#include <asm/fpu/api.h>
fpu/signal.h:9:# include <uapi/asm/sigcontext.h>



arch/xtensa/include
asm/cacheflush.h:91: * (see also Documentation/core-api/cachetlb.rst)
asm/cacheflush.h:155:/* This is not required, see Documentation/core-api/cachetlb.rst */
asm/hw_breakpoint.h:18:#include <uapi/linux/hw_breakpoint.h>
asm/ptrace.h:14:#include <uapi/asm/ptrace.h>
asm/signal.h:15:#include <uapi/asm/signal.h>
asm/syscall.h:15:#include <uapi/linux/audit.h>
asm/types.h:13:#include <uapi/asm/types.h>
asm/unistd.h:6:#include <uapi/asm/unistd.h>


arch/arc/include
asm/elf.h:14:#include <uapi/asm/elf.h>
asm/highmem.h:15:#include <uapi/asm/page.h>
asm/page.h:11:#include <uapi/asm/page.h>
asm/ptrace.h:13:#include <uapi/asm/ptrace.h>
asm/setup.h:13:#include <uapi/asm/setup.h>
asm/syscall.h:12:#include <uapi/linux/audit.h>

arch/arm64/include
asm/cacheflush.h:40: *	See Documentation/core-api/cachetlb.rst for more information. Please note that
asm/hwcap.h:19:#include <uapi/asm/hwcap.h>
asm/hwcap.h:48: * as described in uapi/asm/hwcap.h. For the kernel we represent hwcaps as
asm/pointer_auth.h:26:	struct ptrauth_key apia;
asm/pointer_auth.h:27:	struct ptrauth_key apib;
asm/pointer_auth.h:36:		get_random_bytes(&keys->apia, sizeof(keys->apia));
asm/pointer_auth.h:37:		get_random_bytes(&keys->apib, sizeof(keys->apib));
asm/pointer_auth.h:56:		__ptrauth_key_install(APIA, keys->apia);
asm/pointer_auth.h:57:		__ptrauth_key_install(APIB, keys->apib);
asm/probes.h:32:	struct arch_probe_insn api;
asm/ptrace.h:24:#include <uapi/asm/ptrace.h>
asm/stat.h:19:#include <uapi/asm/stat.h>
asm/syscall.h:19:#include <uapi/linux/audit.h>
asm/tlbflush.h:90: *	as documented in Documentation/core-api/cachetlb.rst:
asm/unistd.h:53:#include <uapi/asm/unistd.h>
asm/uprobes.h:32:	struct arch_probe_insn api;


arch/csky/include
asm/ptrace.h:7:#include <uapi/asm/ptrace.h>
asm/syscall.h:9:#include <uapi/linux/audit.h>
asm/unistd.h:4:#include <uapi/asm/unistd.h>

arch/hexagon/include 
asm/syscall.h:24:#include <uapi/linux/audit.h>

arch/microblaze/include
asm/cacheflush.h:22:/* Look at Documentation/core-api/cachetlb.rst */
asm/elf.h:13:#include <uapi/asm/elf.h>
asm/mmu.h:28:	unsigned long  api:6;	/* Abbreviated page index */
asm/pgtable.h:537:void mapin_ram(void);
asm/ptrace.h:11:#include <uapi/asm/ptrace.h>
asm/setup.h:13:#include <uapi/asm/setup.h>
asm/syscall.h:5:#include <uapi/linux/audit.h>
asm/unistd.h:12:#include <uapi/asm/unistd.h>

arch/nds32/include
asm/ptrace.h:7:#include <uapi/asm/ptrace.h>
asm/syscall.h:8:#include <uapi/linux/audit.h>
asm/unistd.h:6:#include <uapi/asm/unistd.h>

arch/openrisc/include
asm/elf.h:23:#include <uapi/asm/elf.h>
asm/ptrace.h:23:#include <uapi/asm/ptrace.h>
asm/syscall.h:22:#include <uapi/linux/audit.h>


arch/powerpc/include
asm/asm-prototypes.h:23:#include <uapi/asm/ucontext.h>
grep: asm/book3s: Is a directory
asm/bootx.h:12:#include <uapi/asm/bootx.h>
asm/cputable.h:7:#include <uapi/asm/cputable.h>
asm/dt_cpu_ftrs.h:13:#include <uapi/asm/cputable.h>
asm/eeh.h:30:#include <uapi/asm/eeh.h>
asm/elf.h:15:#include <uapi/asm/elf.h>
asm/epapr_hcalls.h:53:#include <uapi/asm/epapr_hcalls.h>
asm/icswx.h:2: * ICSWX api
asm/kvm_para.h:22:#include <uapi/asm/kvm_para.h>
asm/mman.h:10:#include <uapi/asm/mman.h>
grep: asm/nohash: Is a directory
asm/nvram.h:15:#include <uapi/asm/nvram.h>
asm/opal.h:15:#include <asm/opal-api.h>
asm/perf_event_server.h:15:#include <uapi/asm/perf_event.h>
asm/pnv-pci.h:17:#include <asm/opal-api.h>
asm/ptrace.h:26:#include <uapi/asm/ptrace.h>
asm/rio.h:2: * RapidIO architecture support
asm/setup.h:5:#include <uapi/asm/setup.h>
asm/signal.h:6:#include <uapi/asm/signal.h>
asm/signal.h:7:#include <uapi/asm/ptrace.h>
asm/spu_info.h:26:#include <uapi/asm/spu_info.h>
asm/swab.h:10:#include <uapi/asm/swab.h>
asm/syscall.h:16:#include <uapi/linux/audit.h>
asm/termios.h:15:#include <uapi/asm/termios.h>
asm/tm.h:9:#include <uapi/asm/tm.h>
asm/types.h:16:#include <uapi/asm/types.h>
asm/unistd.h:12:#include <uapi/asm/unistd.h>



arch/s390/include
asm/ap.h:262: * @apinfo: On input the info about the AP queue. On output the
asm/ap.h:269:					     union ap_qact_ap_info *apinfo)
asm/ap.h:279:	reg1.value = apinfo->val;
asm/ap.h:286:	apinfo->val = reg2;
asm/asm-prototypes.h:6:#include <asm/fpu/api.h>
asm/chpid.h:9:#include <uapi/asm/chpid.h>
asm/cmb.h:5:#include <uapi/asm/cmb.h>
asm/debug.h:15:#include <uapi/asm/debug.h>
asm/ipl.h:15:#include <uapi/asm/ipl.h>
asm/kvm_host.h:23:#include <asm/fpu/api.h>
asm/kvm_host.h:616: * arch/s390/include/uapi/asm/kvm.h
asm/kvm_host.h:728:	__u8 apie;
asm/kvm_para.h:24:#include <uapi/asm/kvm_para.h>
asm/pkey.h:16:#include <uapi/asm/pkey.h>
asm/ptrace.h:11:#include <uapi/asm/ptrace.h>
asm/runtime_instr.h:5:#include <uapi/asm/runtime_instr.h>
asm/schid.h:6:#include <uapi/asm/schid.h>
asm/setup.h:10:#include <uapi/asm/setup.h>
asm/signal.h:10:#include <uapi/asm/signal.h>
asm/switch_to.h:12:#include <asm/fpu/api.h>
asm/syscall.h:12:#include <uapi/linux/audit.h>
asm/termios.h:10:#include <uapi/asm/termios.h>
asm/unistd.h:10:#include <uapi/asm/unistd.h>


arch/sparc/include
asm/fbio.h:5:#include <uapi/asm/fbio.h>
asm/hypervisor.h:3104:/* ldc_mapin()
asm/hypervisor.h:3170:unsigned long sun4v_ldc_mapin(unsigned long channel,
asm/hypervisor.h:3518:int sun4v_hvapi_register(unsigned long group, unsigned long major,
asm/hypervisor.h:3520:void sun4v_hvapi_unregister(unsigned long group);
asm/hypervisor.h:3521:int sun4v_hvapi_get(unsigned long group,
asm/hypervisor.h:3524:void sun4v_hvapi_init(void);
asm/ioctls.h:5:#include <uapi/asm/ioctls.h>
asm/mman.h:5:#include <uapi/asm/mman.h>
asm/pgtable_32.h:347:void srmmu_mapiorange(unsigned int bus, unsigned long xpa,
asm/pgtable_32.h:349:void srmmu_unmapiorange(unsigned long virt_addr, unsigned int len);
asm/psr.h:14:#include <uapi/asm/psr.h>
asm/ptrace.h:5:#include <uapi/asm/ptrace.h>
asm/setup.h:10:#include <uapi/asm/setup.h>
asm/sigcontext.h:6:#include <uapi/asm/sigcontext.h>
asm/signal.h:9:#include <uapi/asm/signal.h>
asm/syscall.h:5:#include <uapi/linux/audit.h>
asm/termbits.h:5:#include <uapi/asm/termbits.h>
asm/termios.h:5:#include <uapi/asm/termios.h>
asm/traps.h:10:#include <uapi/asm/traps.h>
asm/unistd.h:18:#include <uapi/asm/unistd.h>

arch/unicore32/include
asm/cacheflush.h:36: *	See Documentation/core-api/cachetlb.rst for more information.
asm/ptrace.h:15:#include <uapi/asm/ptrace.h>
asm/syscall.h:5:#include <uapi/linux/audit.h>
